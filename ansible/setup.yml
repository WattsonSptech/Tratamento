- name: Instalar Python, Java, PySpark e rodar projeto
  hosts: all
  become: yes
  vars:
    app_dir: /opt/tratamento
    aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
    aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
    aws_region: "{{ AWS_DEFAULT_REGION | default('us-east-1') }}"
    aws_session_token: "{{ AWS_SESSION_TOKEN }}"
    aws_dir: "/home/ubuntu/.aws"
    gcp_dir: "/home/ubuntu/.config/gcloud"
    gcp_project_id: "projeto-consulta-wattson"
    gcp_credentials_file: "/home/ubuntu/.config/gcloud/service-account.json"
    gcp_service_account_key: "{{ lookup('env', 'GCP_SERVICE_ACCOUNT_KEY') }}"
    bd_root_dir: "/root/.basedosdados/credentials"
    bd_root_file: "/root/.basedosdados/credentials/staging.json"

  tasks:
    - name: Parar o processo Main.py se estiver rodando
      shell: |
        pkill -f "{{ app_dir }}/Main.py" || true
      ignore_errors: yes

    - name: Atualizar cache do apt
      apt:
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Instalar dependÃªncias bÃ¡sicas
      apt:
        name:
          - python3
          - python3-pip
          - python3.12-venv
          - openjdk-17-jdk
          - git
        state: present

    - name: Criar diretÃ³rio do app
      file:
        path: "{{ app_dir }}"
        state: directory
        mode: '0755'

    - name: Clonar ou atualizar repositÃ³rio
      git:
        repo: "https://github.com/WattsonSptech/Tratamento.git"
        dest: "{{ app_dir }}"
        version: "{{ github_ref | default('main') }}"
        force: yes

    - name: Criar virtualenv para PySpark
      command: python3 -m venv {{ app_dir }}/venv
      args:
        creates: "{{ app_dir }}/venv/bin/activate"

    - name: Desinstalar pacotes listados no requirements.txt
      command: "{{ app_dir }}/venv/bin/pip uninstall -y -r {{ app_dir }}/requirements.txt"
      when: ansible_virtualenv is defined

    - name: Instalar PySpark e dependÃªncias no virtualenv
      pip:
        requirements: "{{ app_dir }}/requirements.txt"
        virtualenv: "{{ app_dir }}/venv"
        state: present        

    - name: Exibir versÃ£o do PySpark
      command: "{{ app_dir }}/venv/bin/python -m pip show pyspark"
      register: pyspark_info
      ignore_errors: yes

    - name: Criar arquivo .env
      ansible.builtin.lineinfile:
        path: "{{ app_dir }}/.env"
        line: "BUCKET_NAME_RAW=bkt-wattson-raw-637952174709"
        create: yes
        state: present

    - name: Adicionar variÃ¡veis ao .env
      ansible.builtin.lineinfile:
        path: "{{ app_dir }}/.env"
        insertafter: EOF
        line: "{{ item }}"
      loop:
        - "BUCKET_NAME_TRUSTED=bkt-wattson-trusted-637952174709"
        - "BUCKET_NAME_CLIENT=bkt-wattson-client-637952174709"
        - "DEV_MODE=0"

    - name: Criar diretÃ³rio ~/.aws
      file:
        path: "{{ aws_dir }}"
        state: directory
        mode: '0700'
        owner: ubuntu
        group: ubuntu

    - name: Criar arquivo de credenciais AWS
      copy:
        dest: "{{ aws_dir }}/credentials"
        mode: '0600'
        owner: ubuntu
        group: ubuntu
        content: |
          [default]
          aws_access_key_id = {{ aws_access_key | trim }}
          aws_secret_access_key = {{ aws_secret_key | trim }}
          aws_session_token = {{ aws_session_token | trim }}
     
    - name: Mostrar o conteÃºdo do arquivo de credenciais AWS
      command: cat /home/ubuntu/.aws/credentials
      register: credentials_content
      ignore_errors: yes

    - name: Exibir conteÃºdo do arquivo de credenciais
      debug:
        var: credentials_content.stdout

    - name: Criar diretÃ³rio de credenciais GCP
      file:
        path: "{{ gcp_dir }}"
        state: directory
        mode: '0700'

    - name: Criar arquivo service-account.json a partir do secret
      copy:
        dest: "{{ gcp_credentials_file }}"
        mode: '0600'
        content: "{{ gcp_service_account_key }}"
      no_log: true

    - name: Criar diretÃ³rio padrÃ£o do basedosdados (/root/.basedosdados/credentials)
      file:
        path: "{{ bd_root_dir }}"
        state: directory
        owner: root
        group: root
        mode: '0700'

    - name: Copiar credenciais tambÃ©m para /root/.basedosdados/credentials/staging.json
      copy:
        dest: "{{ bd_root_file }}"
        mode: '0600'
        owner: root
        group: root
        content: "{{ gcp_service_account_key }}"
      no_log: true

    # ðŸš€ NOVO BLOCO â€” evita perguntas interativas do basedosdados
    - name: Criar arquivo de configuraÃ§Ã£o do basedosdados (/root/.basedosdados/config.toml)
      copy:
        dest: /root/.basedosdados/config.toml
        owner: root
        group: root
        mode: '0600'
        content: |
          [gcloud]
          project_id = "{{ gcp_project_id }}"
          credentials_path = "{{ bd_root_file }}"
          billing_project_id = "{{ gcp_project_id }}"
          auth_mode = "service_account"

          [storage]
          bucket_name = "basedosdados"

    - name: Exportar variÃ¡veis de ambiente GCP para futuras tarefas
      lineinfile:
        path: /etc/environment
        line: "{{ item }}"
        create: yes
      loop:
        - "GOOGLE_CLOUD_PROJECT={{ gcp_project_id }}"
        - "GOOGLE_APPLICATION_CREDENTIALS={{ gcp_credentials_file }}"
        - "GOOGLE_CLOUD_AUTH_KIND=serviceaccount"    
        - "BASEDOSDADOS_BILLING_PROJECT_ID={{ gcp_project_id }}"

    - name: Exibir configuraÃ§Ã£o do GCP
      command: "echo $GOOGLE_APPLICATION_CREDENTIALS"
      environment:
        GOOGLE_APPLICATION_CREDENTIALS: "{{ gcp_credentials_file }}"
      register: gcp_env_check

    - name: Mostrar caminho da chave GCP configurada
      debug:
        msg: "Arquivo de credenciais GCP: {{ gcp_env_check.stdout }}"
        
    - name: Executar Main.py dentro do virtualenv como ubuntu
      become_user: ubuntu
      shell: |
        nohup {{ app_dir }}/venv/bin/python {{ app_dir }}/Main.py > /dev/null 2>&1 &
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_key }}"
        AWS_SESSION_TOKEN: "{{ aws_session_token }}"
        AWS_DEFAULT_REGION: "{{ aws_region }}"
        GOOGLE_APPLICATION_CREDENTIALS: "{{ gcp_credentials_file }}"
        BASEDOSDADOS_BILLING_PROJECT_ID: "{{ gcp_project_id }}"


    # - name: Executar Main.py dentro do virtualenv
    #   shell: |
    #     nohup {{ app_dir }}/venv/bin/python {{ app_dir }}/Main.py > {{ app_dir }}/main.log 2>&1 &
    #   environment:
    #     AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
    #     AWS_SECRET_ACCESS_KEY: "{{ aws_secret_key }}"
    #     AWS_SESSION_TOKEN: "{{  aws_session_token  }}"
    #     AWS_DEFAULT_REGION: "{{ aws_region }}"
